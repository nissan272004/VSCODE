{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "import formula": {
    "prefix": "import_formula",
    "body": [
      "from easy_formula_transformation import *",
      "",
      "formula_file = open(f\"./ $1.md\", \"r\")",
      "formula_lines = formula_file.readlines()",
      "",
      "list_strings = []",
      "for i,formula in enumerate(formula_lines):",
      "  if i > 0:",
      "    start_index = formula.find(\"$\")",
      "    list_strings.append(formula[start_index+3:-3])",
      "$2"
    ],
    "description": "import formula"
  },


"generate indexes10": {
    "prefix": "getindexes10",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])],",
      "    [MathTex(list_strings[5]), MathTex(list_strings[6])],",
      "    [MathTex(list_strings[6]), MathTex(list_strings[7])],",
      "    [MathTex(list_strings[7]), MathTex(list_strings[8])],",
      "    [MathTex(list_strings[8]), MathTex(list_strings[9])],",
      "    [MathTex(list_strings[9]), MathTex(list_strings[10])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 10"
  },

  "generate indexes9": {
    "prefix": "getindexes9",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])],",
      "    [MathTex(list_strings[5]), MathTex(list_strings[6])],",
      "    [MathTex(list_strings[6]), MathTex(list_strings[7])],",
      "    [MathTex(list_strings[7]), MathTex(list_strings[8])],",
      "    [MathTex(list_strings[8]), MathTex(list_strings[9])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 9"
  },

  "generate indexes8": {
    "prefix": "getindexes8",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])],",
      "    [MathTex(list_strings[5]), MathTex(list_strings[6])],",
      "    [MathTex(list_strings[6]), MathTex(list_strings[7])],",
      "    [MathTex(list_strings[7]), MathTex(list_strings[8])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 8"
  },
  "generate indexes7": {
    "prefix": "getindexes7",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])],",
      "    [MathTex(list_strings[5]), MathTex(list_strings[6])],",
      "    [MathTex(list_strings[6]), MathTex(list_strings[7])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"    
    ],
    "description": "generate indexes up to 7"
  },
  "generate indexes6": {
    "prefix": "getindexes6",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])],",
      "    [MathTex(list_strings[5]), MathTex(list_strings[6])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 6"
  },
  "generate indexe5": {
    "prefix": "getindexes5",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])],",
      "    [MathTex(list_strings[4]), MathTex(list_strings[5])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 5"
  },
  "generate indexes4": {
    "prefix": "getindexes4",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])],",
      "    [MathTex(list_strings[3]), MathTex(list_strings[4])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 4"
  },
  "generate indexes3": {
    "prefix": "getindexes3",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])],",
      "    [MathTex(list_strings[2]), MathTex(list_strings[3])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 3"
  },
  "generate indexes2": {
    "prefix": "getindexes2",
    "body": [
      "class GetIndexes(EasyFormulaIndex):",
      "  file_name = \"$1\"",
      "  formula_list = [",
      "    [MathTex(list_strings[0]), MathTex(list_strings[1])],",
      "    [MathTex(list_strings[1]), MathTex(list_strings[2])]",
      "  ]",
      "  arrange_methods = [",
      "    lambda grp: grp.arrange(DOWN, buff=1),",
      "    lambda grp: grp.scale(2)",
      "  ]",
      "$2"
    ],
    "description": "generate indexes up to 2"
  },
  "MainScene": {
  "prefix": "mainscene",
  "body": [
    "class MainScene(Scene):",
    "  def construct(self):",
    "    fl = [",
    "      MathTex(_fl)[0].scale(1.7)",
    "      for _fl in list_strings",
    "    ]",
    "    self.play(Write(fl[0]))",
    "    $0"
  ],
  "description": "MainScene"
},
"Transform": {
  "prefix": "trans",
  "body": [
    "self.play(",
    "  *index_animation(",
    "    fl[$1],",
    "    fl[$2],",
    "    [",
    "      $3",
    "    ]",
    "  ),",
    "  run_time=3",
    ")"
  ],
  "description": "Transform"
},
"Write animation": {
  "prefix": "write",
  "body": [
    "*[",
    "  Write(fl[$1][__i],)",
    "  $2",
    "]"
  ],
  "description": "Write animation"
}

}